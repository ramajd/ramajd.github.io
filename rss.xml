<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[My Personal Notes]]></title>
<description><![CDATA[My Personal Notes]]></description>
<link>https://ramajd.github.io/</link>
<lastBuildDate>Thu, 23 Feb 2023 10:38:32 +0330</lastBuildDate>
<item>
  <title><![CDATA[Hash Maps in C]]></title>
  <description><![CDATA[

<div id="outline-container-org2a3a50e" class="outline-2">
<h2 id="org2a3a50e">About HashMap data structure</h2>
<div class="outline-text-2" id="text-org2a3a50e">
<p>
<code>HashMap</code> is a data structure which is efficient for lookup
operations. <code>HashMap</code> does the key search operation in <code>O(1)</code>.
</p>
</div>

<div id="outline-container-org334c8b8" class="outline-3">
<h3 id="org334c8b8">Strengths:</h3>
<div class="outline-text-3" id="text-org334c8b8">
<ul class="org-ul">
<li><b>Fast lookups</b>: since the <code>HashMap</code> performs the lookup operation in <code>O(1)</code>,
it's efficient for the usecases we want to continously perform the search
operations on a series of data.</li>
<li><b>Flexible Keys</b>: any comparable data type can be used as the key for <code>HashMap</code>.</li>
</ul>
</div>
</div>

<div id="outline-container-org448e55c" class="outline-3">
<h3 id="org448e55c">Weaknesses:</h3>
<div class="outline-text-3" id="text-org448e55c">
<ul class="org-ul">
<li><b>Slow worst-case lookup</b>: in the worst case which the Hash function generate
similar hash for the keys, the Lookup operation turns into <code>O(n)</code>, which is
similar to the array or linked-list.</li>
<li><b>Unordered</b>: the keys wont save in any special order, so if we want to look
for the greatest/lowest keys, we need to traverse all the keys to find the
desired one.</li>
<li><b>one-direction lookup</b>: since we can look for the value of a key in
<code>O(1)</code>, looking for the keys pointing to a specific value, requires to loop
over all the elements in the <code>HashMap</code> with <code>O(n)</code> order.</li>
<li><b>not cache friendly</b>: since most of the <code>HashMap</code> implementations are based on
<code>LinkedList</code>, we can't read a series of data together at once from the memory.</li>
</ul>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-center">

<col  class="org-center">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-center">Average</th>
<th scope="col" class="org-center">Worst Case</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Space complexity</td>
<td class="org-center">O(n)</td>
<td class="org-center">O(n)</td>
</tr>

<tr>
<td class="org-left">Insertion time</td>
<td class="org-center">O(1)</td>
<td class="org-center">O(n)</td>
</tr>

<tr>
<td class="org-left">Lookup time</td>
<td class="org-center">O(1)</td>
<td class="org-center">O(n)</td>
</tr>

<tr>
<td class="org-left">Deletion time</td>
<td class="org-center">O(1)</td>
<td class="org-center">O(n)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>


<div id="outline-container-org523c54f" class="outline-2">
<h2 id="org523c54f">Implementing HashMap in C</h2>
<div class="outline-text-2" id="text-org523c54f">
<blockquote>
<p>
you can find the code for this blog post in <a href="https://github.com/ramajd/c_hashmap">this repository</a>. 
</p>
</blockquote>

<p>
in this post we want to implement a <code>HashMap</code> data structure, with <code>int</code> as the
keys and <code>void*</code> as values.
</p>

<p>
First step, we need to define the data structure that stores the <code>HashMap</code>
items. and also the functions for allocation and deletion operations. we call it
<code>MapEntry</code>.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #81A1C1;">typedef</span> <span style="color: #81A1C1;">struct</span> <span style="color: #8FBCBB;">_MapEntry</span> {
  <span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>;
  <span style="color: #8FBCBB;">void</span> *<span style="color: #D8DEE9;">value</span>;
  <span style="color: #81A1C1;">struct</span> <span style="color: #8FBCBB;">_MapEntry</span> *<span style="color: #D8DEE9;">next</span>;
} <span style="color: #8FBCBB;">MapEntry</span>;

<span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #88C0D0;">map_entry_init</span>(<span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>, <span style="color: #8FBCBB;">void</span> *<span style="color: #D8DEE9;">value</span>);
<span style="color: #8FBCBB;">void</span> <span style="color: #88C0D0;">map_entry_free</span>(<span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #D8DEE9;">entry</span>);
</pre>
</div>

<p>
the implementation for the allocation and deletion functions are
straight-forward:
</p>

<ul class="org-ul">
<li><p>
Allocate new <code>MapEntry</code>:
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #88C0D0;">map_entry_init</span>(<span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>, <span style="color: #8FBCBB;">void</span> *<span style="color: #D8DEE9;">value</span>) {
  <span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #D8DEE9;">entry</span> = malloc(<span style="color: #81A1C1;">sizeof</span>(MapEntry));
  entry-&gt;key = key;
  entry-&gt;value = value;
  entry-&gt;next = <span style="color: #81A1C1;">NULL</span>;
  <span style="color: #81A1C1;">return</span> entry;
}
</pre>
</div></li>

<li><p>
Free the memory allocated for <code>MapEntry</code>: we should free the memory
recursively. for a <code>MapEntry</code> and all it's children.
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #8FBCBB;">void</span> <span style="color: #88C0D0;">map_entry_free</span>(<span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #D8DEE9;">entry</span>) {
  <span style="color: #81A1C1;">while</span> (entry &amp;&amp; entry-&gt;next) {
    map_entry_free(entry-&gt;next);
  }
  free(entry);
}
</pre>
</div></li>
</ul>

<p>
Having the <code>MapEntry</code> structure, now we can go implementing the <code>HashMap</code>
itself.
</p>

<div class="org-src-container">
<pre class="src src-C"><span style="color: #81A1C1;">typedef</span> <span style="color: #81A1C1;">struct</span> {
  <span style="color: #8FBCBB;">MapEntry</span> **<span style="color: #D8DEE9;">entries</span>;
  <span style="color: #8FBCBB;">size_t</span> <span style="color: #D8DEE9;">count</span>;
  <span style="color: #8FBCBB;">size_t</span> <span style="color: #D8DEE9;">size</span>;
} <span style="color: #8FBCBB;">HashMap</span>;

<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #88C0D0;">hash_map_init</span>(<span style="color: #8FBCBB;">size_t</span> <span style="color: #D8DEE9;">map_size</span>);
<span style="color: #8FBCBB;">void</span> <span style="color: #88C0D0;">hash_map_free</span>(<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span>);
<span style="color: #8FBCBB;">void</span> <span style="color: #88C0D0;">hash_map_insert</span>(<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span>, <span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>, <span style="color: #8FBCBB;">void</span> *<span style="color: #D8DEE9;">value</span>);
<span style="color: #8FBCBB;">bool</span> <span style="color: #88C0D0;">hash_map_get</span>(<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span>, <span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>, <span style="color: #8FBCBB;">void</span> *<span style="color: #D8DEE9;">value</span>);
<span style="color: #8FBCBB;">void</span> *<span style="color: #88C0D0;">hash_map_delete</span>(<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span>, <span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>);
</pre>
</div>

<ul class="org-ul">
<li><p>
Initiate new <code>HashMap</code>: first we allocate the memory itself. then we need to
allocate the memory for it's entries.
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #8FBCBB;">HashMap</span> *<span style="color: #88C0D0;">hash_map_init</span>(<span style="color: #8FBCBB;">size_t</span> <span style="color: #D8DEE9;">map_size</span>) {
  <span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span> = malloc(<span style="color: #81A1C1;">sizeof</span>(map_size));
  map-&gt;count = 0;
  map-&gt;size = map_size;
  map-&gt;entries = malloc(<span style="color: #81A1C1;">sizeof</span>(MapEntry) * map_size);
  <span style="color: #8FBCBB;">size_t</span> <span style="color: #D8DEE9;">i</span>;
  <span style="color: #81A1C1;">for</span> (i = 0; i &lt; map_size; ++i) {
    map-&gt;entries[i] = <span style="color: #81A1C1;">NULL</span>;
  }
  <span style="color: #81A1C1;">return</span> map;
}
</pre>
</div></li>

<li><p>
Free an allocated <code>HashMap</code>: first we need to free the map entries
recursively. then we delete the <code>HashMap</code> itself from memory.
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #8FBCBB;">void</span> <span style="color: #88C0D0;">hash_map_free</span>(<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span>) {
  <span style="color: #8FBCBB;">size_t</span> <span style="color: #D8DEE9;">i</span>;
  <span style="color: #81A1C1;">for</span> (i = 0; i &lt; map-&gt;size; ++i) {
    map_entry_free(map-&gt;entries[i]);
    map-&gt;entries[i] = <span style="color: #81A1C1;">NULL</span>;
  }
  free(map);
}
</pre>
</div></li>

<li><p>
Hash function: we need to define a function to transform each key to a
position in <code>HashMap</code>. for simplicity we use the reminder of the  <code>key</code>
divided by map size as the item position.
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #8FBCBB;">size_t</span> <span style="color: #88C0D0;">hash_function</span>(<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span>, <span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>) {
  <span style="color: #81A1C1;">return</span> key % map-&gt;size;
}
</pre>
</div></li>

<li><p>
Insert new value: first we need to calculate the key slot using our hash
function, then we will put the <code>MapEntry</code> to matching slot. in case of
colision occurence, we should add the entry to the end of the slot
linked-list.
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #8FBCBB;">void</span> <span style="color: #88C0D0;">hash_map_insert</span>(<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span>, <span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>, <span style="color: #8FBCBB;">void</span> *<span style="color: #D8DEE9;">value</span>){
  <span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #D8DEE9;">entry</span> = map_entry_init(key, value);
  <span style="color: #8FBCBB;">size_t</span> <span style="color: #D8DEE9;">slot</span> = hash_function(map, key);
  <span style="color: #81A1C1;">if</span> (map-&gt;entries[slot] == <span style="color: #81A1C1;">NULL</span>) {
    map-&gt;entries[slot] = entry;
  } <span style="color: #81A1C1;">else</span> {
    <span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #D8DEE9;">iter</span> = map-&gt;entries[slot];
    <span style="color: #81A1C1;">while</span> (iter-&gt;next) {
      iter = iter-&gt;next;
    }
    iter-&gt;next = entry;
  }
  map-&gt;count += 1;
}
</pre>
</div></li>

<li><p>
Get value for a key: to get the matching value for for a key, first we check
the matching slot in map, if the key not found, we traverse the linked-list.
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #8FBCBB;">bool</span> <span style="color: #88C0D0;">hash_map_get</span>(<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span>, <span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>, <span style="color: #8FBCBB;">void</span> *<span style="color: #D8DEE9;">value</span>) {
  <span style="color: #8FBCBB;">size_t</span> <span style="color: #D8DEE9;">slot</span> = hash_function(map, key);
  <span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #D8DEE9;">iter</span> = map-&gt;entries[slot];
  <span style="color: #81A1C1;">while</span> (iter) {
    <span style="color: #81A1C1;">if</span> (iter-&gt;key == key) {
      value = iter-&gt;value;
      <span style="color: #81A1C1;">return</span> <span style="color: #81A1C1;">true</span>;
    }
    iter = iter-&gt;next;
  }
  <span style="color: #81A1C1;">return</span> <span style="color: #81A1C1;">false</span>;
}
</pre>
</div></li>

<li><p>
delete entry: similar to the <code>has_map_get</code> function, we need to search for the
matching key's position. then we should remove the entry, and update the
pointers for the matching entry, and it's parent entry.
</p>
<div class="org-src-container">
<pre class="src src-C"><span style="color: #8FBCBB;">void</span> *<span style="color: #88C0D0;">hash_map_delete</span>(<span style="color: #8FBCBB;">HashMap</span> *<span style="color: #D8DEE9;">map</span>, <span style="color: #8FBCBB;">int</span> <span style="color: #D8DEE9;">key</span>) {
  <span style="color: #8FBCBB;">size_t</span> <span style="color: #D8DEE9;">slot</span> = hash_function(map, key);
  <span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #D8DEE9;">iter</span> = map-&gt;entries[slot];
  <span style="color: #8FBCBB;">MapEntry</span> *<span style="color: #D8DEE9;">prv</span> = <span style="color: #81A1C1;">NULL</span>;
  <span style="color: #81A1C1;">while</span> (iter) {
    <span style="color: #81A1C1;">if</span> (iter-&gt;key == key) {
      <span style="color: #81A1C1;">if</span> (<span style="color: #81A1C1;">!</span>prv) {
        map-&gt;entries[slot] = iter-&gt;next;
      } <span style="color: #81A1C1;">else</span> {
        prv-&gt;next = iter-&gt;next;
      }
      iter-&gt;next = <span style="color: #81A1C1;">NULL</span>;
      <span style="color: #8FBCBB;">void</span> *<span style="color: #D8DEE9;">value</span> = iter-&gt;value;
      map_entry_free(iter);
      map-&gt;count -= 1;
      <span style="color: #81A1C1;">return</span> value;
    }
    prv = iter;
    iter = iter-&gt;next;
  }
  <span style="color: #81A1C1;">return</span> <span style="color: #81A1C1;">NULL</span>;
}
</pre>
</div></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://ramajd.github.io/tags.html">Tags</a>: <a href="https://ramajd.github.io/tag-programming.html">programming</a> <a href="https://ramajd.github.io/tag-c.html">c</a> <a href="https://ramajd.github.io/tag-hash-map.html">hash-map</a> </div>]]></description>
  <category><![CDATA[programming]]></category>
  <category><![CDATA[c]]></category>
  <category><![CDATA[hash-map]]></category>
  <link>https://ramajd.github.io/2023-02-23-hash-maps-in-c.html</link>
  <guid>https://ramajd.github.io/2023-02-23-hash-maps-in-c.html</guid>
  <pubDate>Thu, 16 Feb 2023 10:57:00 +0330</pubDate>
</item>
<item>
  <title><![CDATA[Qt bindings of GStreamer on Android (failed experience)]]></title>
  <description><![CDATA[
<blockquote>
<p>
for the ones who may read this note, unfortunately I couldn't succeed to
provide a working solution. however I decided to write my findings here, hat
hopefully help someone else that wants to cdo the same thing in the future. the
source code related to my tries is located on
<a href="https://github.com/ramajd/gstreamer-qt-android">this repository</a>.
</p>
</blockquote>

<p>
There are two things that we should consider when we want to start our journay:
</p>
<ul class="org-ul">
<li>first thing is that all the fancy automated tools provided by GStreamer team for
Android doesn't work here.</li>
<li>he second is that the Qt bindings are not available in the official pre-built
binaries and we need to create our own custom version of gstreamer library.</li>
</ul>


<div id="outline-container-org18bc2e1" class="outline-2">
<h2 id="org18bc2e1">Build the <code>libgstreamer_android.so</code></h2>
<div class="outline-text-2" id="text-org18bc2e1">
<p>
Official tutorials of Gstreamer, are based on Android NDK build system, which
automatically build and deploy the <code>libgstreamer_android.so</code> library (absolutely
without Qt support!) to the target APK based on the plugins has been chosen
inside make file.
</p>

<p>
we need to replace it by custom targets in our <code>qmake</code> project file. to do so we
defined two custom targets to build and cleanup the <code>libgstreamer_android.so</code>
file for us:
</p>

<div class="org-src-container">
<pre class="src src-makefile"><span style="color: #D8DEE9;">GSTREAMER_ROOT_ANDROID</span> = $$_PRO_FILE_PWD_/gstreamer-1.0/armv7

<span style="color: #D8DEE9;">gst.target</span> = $$ANDROID_PACKAGE_SOURCE_DIR/libs/armeabi-v7a/libgstreamer_android.so
<span style="color: #D8DEE9;">gst.commands</span> = cd $$ANDROID_PACKAGE_SOURCE_DIR; \
               ./build_gstreamer.sh TARGET_ARCH_ABI=armeabi-v7a \
               <span style="color: #D8DEE9;">GSTREAMER_ROOT_ANDROID</span>=$$GSTREAMER_ROOT_ANDROID \
               <span style="color: #D8DEE9;">NDK_PROJECT_PATH</span>=$$ANDROID_PACKAGE_SOURCE_DIR

<span style="color: #D8DEE9;">extraclean.commands</span> = rm -rv $$ANDROID_PACKAGE_SOURCE_DIR/libs $$ANDROID_PACKAGE_SOURCE_DIR/obj
<span style="color: #D8DEE9;">clean.depends</span> += extraclean

<span style="color: #D8DEE9;">QMAKE_EXTRA_TARGETS</span> += gst clean extraclean
<span style="color: #D8DEE9;">PRE_TARGETDEPS</span> += $$ANDROID_PACKAGE_SOURCE_DIR/libs/armeabi-v7a/libgstreamer_android.so
</pre>
</div>

<p>
since we don't have access to the environment variables during our custom
target, I wrote a custom bash script to first prepare the environment (the
Android relate paths), and then run the <code>ndk-build</code> for me:
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #81A1C1;">source</span> ~/.bashrc
ndk-build $<span style="color: #D8DEE9;">@</span>
</pre>
</div>

<p>
finally we have the requirements to build the <code>libgstreamer_android.so</code> based on
the make file we added to <code>android/jni/Android.mk</code>.
</p>
</div>
</div>


<div id="outline-container-org2ea92ee" class="outline-2">
<h2 id="org2ea92ee">Build the Gstreamer libraries including the Qt bindings</h2>
<div class="outline-text-2" id="text-org2ea92ee">
<p>
The approach that I followed was to use the <code>cerbero</code> the build system which is
provided by GStreamer team to create custom bundles of GStreamer.
</p>

<p>
to do so, first we need to checkout the <code>cerbero</code> from it's <a href="https://gitlab.freedesktop.org/gstreamer/cerbero">repository</a> and
checkout the version we want to build.
</p>

<div class="org-src-container">
<pre class="src src-bash">$ git clone https://gitlab.freedesktop.org/gstreamer/cerbero
$ cd cerbero
$ git checkout 1.20.1
</pre>
</div>

<p>
then we need to bootstrap the <code>cerbero</code> to have all of it's requirements. we
also need identify our cross compile configuration using one of the
configurations provided inside <code>config</code> folder. I used the
<code>config/cross-android-universal.cbc</code> config.
</p>

<p>
<b>Note</b>: in my experience I faced errors about missing python pacakges (<a href="https://pypi.org/project/distro/"><code>distro</code></a>), my
host OS (Manjaro) was also undefined for the bootstrap script, so I add it
manually, based on the error messages that I received.
</p>

<div class="org-src-container">
<pre class="src src-bash">$ ./cerbero-uninstalled -c config/cross-android-universal.cbc bootstrap
</pre>
</div>

<p>
after preparing the environment, we go for building our custom GStreamer
bundle. to do so we use the <code>package</code> command and add the <code>qt5</code> variant to list
of it's default recipes.
</p>

<div class="org-src-container">
<pre class="src src-bash"><span style="color: #81A1C1;">export</span> <span style="color: #D8DEE9;">QMAKE</span>=<span style="color: #A3BE8C;">'/path/to/Qt/5.15.2/android/bin/qmake'</span>
$ ./cerbero-uninstalled -c config/cross-android-universal.cbc -v qt5 package gstreamer-1.0
</pre>
</div>


<p>
following the above steps, we have a
<code>gstreamer-1.0-android-universal-1.20.1.tar.xz` file which including the Qt5
bindings. they will be added as ~GSTREAMER_PLUGINS_QT5</code> plugin to the list of
plugins.
</p>

<p>
however when I trying to create the <code>libgstreamer_android.so</code> using this bundle,
we receive following linker errors, which I didn't have a chance to fix them
yet.
</p>

<div class="org-src-container">
<pre class="src src-text">...
../gstqsgtexture.cc:36: error: undefined reference to 'QSGTexture::QSGTexture()'
../gstqsgtexture.cc:36: error: undefined reference to 'QOpenGLFunctions::QOpenGLFunctions()'
../gstqsgtexture.cc:40: error: undefined reference to 'QOpenGLFunctions::initializeOpenGLFunctions()'
../gstqsgtexture.cc:55: error: undefined reference to 'QSGTexture::~QSGTexture()'
../gstqsgtexture.cc:64: error: undefined reference to 'QOpenGLContext::functions() const'
../gstqsgtexture.cc:67: error: undefined reference to 'QSGTexture::~QSGTexture()'
../gstqsgtexture.cc:67: error: undefined reference to 'QSGTexture::~QSGTexture()'
../gstqsgtexture.cc:172: error: undefined reference to 'QOpenGLContext::functions() const'
armeabi-v7a/moc_gstqsgtexture.cpp:88: error: undefined reference to 'QSGTexture::qt_metacast(char const*)'
armeabi-v7a/moc_gstqsgtexture.cpp:93: error: undefined reference to 'QSGTexture::qt_metacall(QMetaObject::Call, int, void**)'
/home/reza/QtProjects/GStreamerTest/gstreamer-1.0/armv7/lib/gstreamer-1.0/libgstqmlgl.a(moc_gstqsgtexture.o):moc_gstqsgtexture.cpp:GstQSGTexture::staticMetaObject: error: undefined reference to 'QSGTexture::staticMetaObject'
/home/reza/QtProjects/GStreamerTest/gstreamer-1.0/armv7/lib/gstreamer-1.0/libgstqmlgl.a(moc_gstqsgtexture.o):moc_gstqsgtexture.cpp:vtable for GstQSGTexture: error: undefined reference to 'QSGTexture::normalizedTextureSubRect() const'
/home/reza/QtProjects/GStreamerTest/gstreamer-1.0/armv7/lib/gstreamer-1.0/libgstqmlgl.a(moc_gstqsgtexture.o):moc_gstqsgtexture.cpp:vtable for GstQSGTexture: error: undefined reference to 'QSGTexture::isAtlasTexture() const'
/home/reza/QtProjects/GStreamerTest/gstreamer-1.0/armv7/lib/gstreamer-1.0/libgstqmlgl.a(moc_gstqsgtexture.o):moc_gstqsgtexture.cpp:vtable for GstQSGTexture: error: undefined reference to 'QSGTexture::removedFromAtlas() const'
/home/reza/QtProjects/GStreamerTest/gstreamer-1.0/armv7/lib/gstreamer-1.0/libgstqmlgl.a(moc_gstqsgtexture.o):moc_gstqsgtexture.cpp:typeinfo for GstQSGTexture: error: undefined reference to 'typeinfo for QSGTexture'
clang++: error: linker command failed with exit code 1 (use -v to see invocation)
</pre>
</div>
</div>
</div>

<div id="outline-container-orga835c5d" class="outline-2">
<h2 id="orga835c5d">References</h2>
<div class="outline-text-2" id="text-orga835c5d">
<p>
these are the usefull references that I found during my journay of working on
this issue:
</p>

<ul class="org-ul">
<li>a helpful blog post about: <a href="http://pepijndevos.nl/2018/10/02/qtgstreamerddsandroid.html">Qt+GStreamer+DDS+Android</a></li>
<li><a href="https://github.com/ArmsOfSorrow/gstreamer-android-qt-app">https://github.com/ArmsOfSorrow/gstreamer-android-qt-app</a></li>
<li><a href="https://github.com/ystreet/qt-gstreamer-android">https://github.com/ystreet/qt-gstreamer-android</a></li>
<li><a href="https://gstreamer.freedesktop.org/documentation/installing/building-from-source-using-cerbero.html?gi-language=c">GStreamer reference about how to use the cerbero</a></li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://ramajd.github.io/tags.html">Tags</a>: <a href="https://ramajd.github.io/tag-android.html">android</a> <a href="https://ramajd.github.io/tag-gstreamer.html">gstreamer</a> <a href="https://ramajd.github.io/tag-qt.html">Qt</a> </div>]]></description>
  <category><![CDATA[android]]></category>
  <category><![CDATA[gstreamer]]></category>
  <category><![CDATA[Qt]]></category>
  <link>https://ramajd.github.io/2022-04-19-qt-bindings-of-gstreamer-on-android-(failed-experience).html</link>
  <guid>https://ramajd.github.io/2022-04-19-qt-bindings-of-gstreamer-on-android-(failed-experience).html</guid>
  <pubDate>Tue, 19 Apr 2022 18:46:00 +0430</pubDate>
</item>
<item>
  <title><![CDATA[Guix: how to set package udev rules]]></title>
  <description><![CDATA[
<blockquote>
<p>
Just read a <i><a href="https://lists.gnu.org/archive/html/guix-devel/2021-12/msg00095.html">thread</a></i> on guix mailing list, about <b>adding udev rules</b> for a
package. in order to have an fixed reference about it, I decided to post it
here.
</p>
</blockquote>

<p>
adding <code>udev</code> rules for a guix package is as easy as adding it to the
<code>&lt;out&gt;/lib/udev/rules.d/</code> directory. so we can either add it as an <code>INSTALL</code>
rule in our <code>CMakefile.txt</code> or add it to manually install the rules as part of
our package <code>install</code> phase:
</p>

<div class="org-src-container">
<pre class="src src-scheme">(<span style="color: #81A1C1;">define-public</span> <span style="color: #88C0D0;">package-name</span>
  (package
   ...
   (arguments
    `(<span style="color: #81A1C1;">#:phases</span>
      (modify-phases %standard-phases
       (add-after 'unpack 'patch-udev-rules
         (lambda* (<span style="color: #81A1C1;">#:key</span> outputs <span style="color: #81A1C1;">#:allow-other-keys</span>)
           (<span style="color: #81A1C1;">let</span> ((out (assoc-ref outputs <span style="color: #A3BE8C;">"out"</span>)))
             (substitute* <span style="color: #A3BE8C;">"CMakefile.txt"</span>
                          ((<span style="color: #A3BE8C;">"/ib/udev/rules.d"</span>)
                           (string-append out <span style="color: #A3BE8C;">"/lib/udev/rules.d"</span>)))
             #t))))))
   ...))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-scheme">(<span style="color: #81A1C1;">define-public</span> <span style="color: #88C0D0;">package-name</span>
  (package
   ...
   (arguments
    `(<span style="color: #81A1C1;">#:phases</span>
      (modify-phases %standard-phases
       (add-after 'install 'install-udev-rules
         (lambda* (<span style="color: #81A1C1;">#:key</span> outputs <span style="color: #81A1C1;">#:allow-other-keys</span>)
           (<span style="color: #81A1C1;">let</span> ((out (assoc-ref outputs <span style="color: #A3BE8C;">"out"</span>)))
             (mkdir-p (string-append out <span style="color: #A3BE8C;">"/lib/udev/rules.d"</span>))
             (copy-file <span style="color: #A3BE8C;">"123-my-custom-udev.rules"</span>
                        (string-append out
                                       <span style="color: #A3BE8C;">"/lib/udev/rules.d/"</span>
                                       <span style="color: #A3BE8C;">"123-my-custom-udev.rules"</span>))
             #t))))))
   ...
   ))
</pre>
</div>
<div class="taglist"><a href="https://ramajd.github.io/tags.html">Tags</a>: <a href="https://ramajd.github.io/tag-guix.html">guix</a> </div>]]></description>
  <category><![CDATA[guix]]></category>
  <link>https://ramajd.github.io/2021-12-13-guix-how-to-set-package-udev-rules.html</link>
  <guid>https://ramajd.github.io/2021-12-13-guix-how-to-set-package-udev-rules.html</guid>
  <pubDate>Mon, 13 Dec 2021 11:43:00 +0330</pubDate>
</item>
<item>
  <title><![CDATA[New Start]]></title>
  <description><![CDATA[
<p>
After a while finally I decided to restore back my personal blog, writting down
challenges I'm facing with, during my daily work. this time I decided to write in
English, might be more useful for the ones who might face same issues.
</p>

<p>
One of the challenges that I faced was to choose a proper platform to build my
blog on top of. using blog services like <i>Blogger</i> or <i>Wordpress</i> previously
they seemd to be kind of over-qualified for my needs. so I decided to switch to
static blog generators this time.
</p>

<p>
It's been a while that I'm using <i><a href="https://guix.gnu.org">GNU Guix</a></i> on my work and it was an opportunity
for me to use <i><a href="https://www.gnu.org/software/emacs/">GNU Emacs</a></i> as my common text editor and IDE. working more with
Emacs, I love this editor much more.
</p>


<figure id="org033656b">
<img src="./static/images/emacs_gnu_org_mode.png" alt="emacs_gnu_org_mode.png">

</figure>

<p>
Since for each problem you face, Emacs provides you a solution, it also has a
solution for my blogging Problem, <i><a href="https://orgmode.org/">Org Mode</a></i>. search for Emacs blogging tools,
there are a bunch of packages already available, and since I was looking for a
simple tool to allow me setup my blog rapidly, I decided to use
<i><a href="https://github.com/bastibe/org-static-blog">org-static-blog</a></i>.
</p>

<p>
In order to setup my blog, I just need to add an <a href="https://github.com/bastibe/org-static-blog#examples">initial configuration</a> to my
<code>init.el</code> file, create new post using <code>org-static-blog-create-new-post</code> and run
<code>org-static-blog-publish</code> to generate html files. after that the only thing that
I need to do was to publish generated files to <a href="https://pages.github.com/">github pages</a>.
</p>
<div class="taglist"><a href="https://ramajd.github.io/tags.html">Tags</a>: <a href="https://ramajd.github.io/tag-personal.html">personal</a> </div>]]></description>
  <category><![CDATA[personal]]></category>
  <link>https://ramajd.github.io/2020-12-04-new-start.html</link>
  <guid>https://ramajd.github.io/2020-12-04-new-start.html</guid>
  <pubDate>Fri, 04 Dec 2020 15:10:00 +0330</pubDate>
</item>
</channel>
</rss>
